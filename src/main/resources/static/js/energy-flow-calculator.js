/*
 * IceWheel Energy
 * Copyright (C) 2025 IceWheel LLC
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 */

/**
 * @file This file contains the core logic for calculating energy flow distribution.
 * It is designed to be a pure, reusable module with no side effects.
 * The calculatePowerFlows function is the primary export and can be used by any
 * part of the application that needs to understand the detailed energy breakdown.
 */

/**
 * Calculates the detailed distribution of power flows between solar, grid, home, and battery.
 * This pure function follows a specific priority order for energy distribution:
 * 1. Battery Charging: Power is first allocated to charge the battery, prioritizing solar and then drawing from the grid if necessary.
 * 2. Home Consumption: Remaining power is used to meet the home's load, prioritizing solar, then battery discharge, and finally drawing from the grid.
 * 3. Grid Export: Any surplus power from solar or battery discharge after meeting the other needs is exported to the grid.
 *
 * @param {object} liveStatus The raw live status object from the API.
 * @param {number} liveStatus.solar_power Power being generated by solar (W).
 * @param {number} liveStatus.grid_power Power being imported from (+) or exported to (-) the grid (W).
 * @param {number} liveStatus.load_power Power being consumed by the home (W).
 * @param {number} liveStatus.battery_power Power being discharged from (+) or charged into (-) the battery (W).
 * @returns {{from_solar_to_battery: number, from_grid_to_battery: number, from_solar_to_home: number, from_battery_to_home: number, from_grid_to_home: number, from_solar_to_grid: number, from_battery_to_grid: number}} An object containing a detailed breakdown of the power flows in Watts (W).
 */
function calculatePowerFlows(liveStatus) {
    const {solar_power, grid_power, load_power, battery_power} = liveStatus;

    // Initialize mutable variables representing available power sources and remaining demand.
    let solar_rem = solar_power;
    let load_rem = load_power;
    let battery_discharge = Math.max(0, battery_power);
    let grid_import = Math.max(0, grid_power);
    let battery_charge_demand = Math.abs(Math.min(0, battery_power));

    // --- Step 1: Satisfy Battery Charge Demand (Solar > Grid) ---
    const from_solar_to_battery = Math.min(solar_rem, battery_charge_demand);
    solar_rem -= from_solar_to_battery;
    battery_charge_demand -= from_solar_to_battery;

    const from_grid_to_battery = Math.min(grid_import, battery_charge_demand);
    grid_import -= from_grid_to_battery;
    battery_charge_demand -= from_grid_to_battery;

    // --- Step 2: Satisfy Home Load Demand (Solar > Battery > Grid) ---
    const from_solar_to_home = Math.min(solar_rem, load_rem);
    solar_rem -= from_solar_to_home;
    load_rem -= from_solar_to_home;

    const from_battery_to_home = Math.min(battery_discharge, load_rem);
    battery_discharge -= from_battery_to_home;
    load_rem -= from_battery_to_home;

    const from_grid_to_home = Math.min(grid_import, load_rem);
    grid_import -= from_grid_to_home;
    load_rem -= from_grid_to_home;

    // --- Step 3: Handle Surplus Power for Grid Export (Solar > Battery) ---
    // Any remaining solar or battery power is considered exported to the grid.
    const from_solar_to_grid = solar_rem;
    const from_battery_to_grid = battery_discharge;

    return {
        from_solar_to_battery,
        from_grid_to_battery,
        from_solar_to_home,
        from_battery_to_home,
        from_grid_to_home,
        from_solar_to_grid,
        from_battery_to_grid
    };
}